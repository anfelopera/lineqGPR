% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lineqAGP.R
\name{simulate.lineqAGP}
\alias{simulate.lineqAGP}
\title{Simulation Method for the \code{"lineqAGP"} S3 Class}
\usage{
\method{simulate}{lineqAGP}(object, nsim = 1, seed = NULL, xtest, ...)
}
\arguments{
\item{object}{an object with class \code{"lineqAGP"}}

\item{nsim}{the number of simulations}

\item{seed}{see \code{\link{simulate}}}

\item{xtest}{a vector (or matrix) with the test input design}

\item{...}{further arguments passed to or from other methods}
}
\value{
A \code{"lineqAGP"} object with the following elements
\item{x}{a vector (or matrix) with the training input design}
\item{y}{the training output vector at \code{x}}
\item{xtest}{a vector (or matrix) with the test input design}
\item{Phi.test}{a matrix corresponding to the hat basis functions evaluated
at \code{xtest}. The basis functions are indexed by rows.}
\item{xi.sim}{the posterior sample-path of the finite-dimensional Gaussian vector}
\item{ysim}{the posterior sample-path of the observed GP
Note: \code{ysim = Phi.test \%*\% xi.sim}}
}
\description{
Simulation method for the \code{"lineqAGP"} S3 class.
}
\details{
The posterior sample-path of the finite-dimensional GP with linear inequality
constraints are computed. Here, \eqn{\boldsymbol{\xi}}{\xi} is a centred Gaussian
vector with covariance \eqn{\boldsymbol{\Gamma}}{\Gamma}, s.t.
\eqn{\boldsymbol{\Phi} \boldsymbol{\xi} = \boldsymbol{y}}{\Phi \xi = y}
(interpolation constraints) and
\eqn{\boldsymbol{l} \leq \boldsymbol{\Lambda} \boldsymbol{\xi} \leq \boldsymbol{u}}{lb \le \Lambda \xi \le ub}
(inequality constraints).
}
\examples{
library(plot3D)
# creating the model
d <- 2
fun1 <- function(x) return(4*(x-0.5)^2)
fun2 <- function(x) return(2*x)
targetFun <- function(x) return(fun1(x[, 1]) + fun2(x[, 2])) 
xgrid <- expand.grid(seq(0, 1, 0.01), seq(0, 1, 0.01))
ygrid <- targetFun(xgrid)
xdesign <- rbind(c(0.5, 0), c(0.5, 0.5), c(0.5, 1), c(0, 0.5), c(1, 0.5))
ydesign <- targetFun(xdesign)
model <- create(class = "lineqAGP", x = xdesign, y = ydesign,
                constrType = c("convexity", "monotonicity"), m = 10)

# updating and expanding the model
model$kernParam[[1]]$type <- "matern52"
model$kernParam[[2]]$type <- "matern52"
model$kernParam[[1]]$par <- c(1, 0.2)
model$kernParam[[2]]$par <- c(1, 0.3)
model$nugget <- 1e-9
model$varnoise <- 1e-5

# sampling from the model
ntest <- 25
xtest  <- cbind(seq(0, 1, length = ntest), seq(0, 1, length = ntest))
ytest <- targetFun(xtest)
sim.model <- simulate(model, nsim = 1e3, seed = 1, xtest = xtest)
PhiAll.test <- cbind(sim.model$Phi.test[[1]][rep(1:ntest, times = ntest), ],
                     sim.model$Phi.test[[2]][rep(1:ntest, each = ntest), ])
persp3D(x = unique(xtest[, 1]), y = unique(xtest[, 2]),
        z = matrix(rowMeans(PhiAll.test \%*\% sim.model$xiAll.sim), ntest, ntest),
        xlab = "x1", ylab = "x2", zlab = "mode(x1,x2)", zlim = c(0, 3),
        phi = 20, theta = -30, alpha = 1, colkey = FALSE)
points3D(x = xdesign[,1], y = xdesign[,2], z = ydesign, col = "black", pch = 19, add = TRUE)

}
\references{
A. F. Lopez-Lopera (2019),
"Gaussian process modelling under inequality constraints".
\emph{PhD thesis, Mines Saint-Etienne}
<https://tel.archives-ouvertes.fr/tel-02863891>
}
\seealso{
\code{\link{create.lineqAGP}}, \code{\link{augment.lineqAGP}},
         \code{\link{predict.lineqAGP}}
}
\author{
A. F. Lopez-Lopera
}
